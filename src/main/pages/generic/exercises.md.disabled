
### Exercise: Aligning columns in CSV output

It would perhaps be better if we separated
the data for rectangles and circles 
into two separate sets of columns.
We can do this by adding a `width` field to `CsvEncoder`:

```disabledtut:book:silent
trait CsvEncoder[A] {
  def width: Int
  def encode(value: A): List[String]
}
```

If we follow through with all of our definitions,
we can produce instances
that place each field in the ADT in a different column.
We will leave this as an exercise to the reader.

<div class="solution">
We start by modifying the definition of `createEncoder`
to accept a `width` parameter:

```disabledtut:book:silent
def createEncoder[A](cols: Int)(func: A => List[String]): CsvEncoder[A] =
  new CsvEncoder[A] {
    val width = cols
    def encode(value: A): List[String] =
      func(value)
  }
```

Then we modify our base encoders to each record a width of `1`:

```disabledtut:book:silent
implicit val stringEncoder: CsvEncoder[String] =
  createEncoder(1)(str => List(str))

implicit val intEncoder: CsvEncoder[Int] =
  createEncoder(1)(num => List(num.toString))

implicit val booleanEncoder: CsvEncoder[Boolean] =
  createEncoder(1)(bool => List(if(bool) "cone" else "glass"))

implicit val doubleEncoder: CsvEncoder[Double] =
  createEncoder(1)(d => List(d.toString))
```

Our encoders for `HNil` and `CNil` have width `0` and our
encoders for `::` and `:+:` have a width determined by
the encoders for their heads and tails:

```disabledtut:book:silent
import shapeless.{HList, HNil, ::}

implicit val hnilEncoder: CsvEncoder[HNil] =
  createEncoder(0)(hnil => Nil)

implicit def hlistEncoder[H, T <: HList](
  implicit
  hEncoder: CsvEncoder[H],
  tEncoder: CsvEncoder[T]
): CsvEncoder[H :: T] =
  createEncoder(hEncoder.width + tEncoder.width) {
    case h :: t =>
      hEncoder.encode(h) ++ tEncoder.encode(t)
  }
```

Our `:+:` encoder pads its output with a number of columns
equal to the width of the encoder it isn't using for serialization:

```disabledtut:book:silent
import shapeless.{Coproduct, CNil, :+:, Inl, Inr}

implicit val cnilEncoder: CsvEncoder[CNil] =
  createEncoder(0) { cnil =>
    throw new Exception("The impossible has happened!")
  }

implicit def coproductEncoder[H, T <: Coproduct](
  implicit
  hEncoder: CsvEncoder[H],
  tEncoder: CsvEncoder[T]
): CsvEncoder[H :+: T] =
  createEncoder(hEncoder.width + tEncoder.width) {
    case Inl(h) => hEncoder.encode(h) ++ List.fill(tEncoder.width)("")
    case Inr(t) => List.fill(hEncoder.width)("") ++ tEncoder.encode(t)
  }
```

Finally, our ADT encoder mirrors the width of
the encoder for its generic representation:

```disabledtut:book:silent
import shapeless.Generic

implicit def genericEncoder[A, R](
  implicit
  gen: Generic.Aux[A, R],
  lEncoder: CsvEncoder[R]
): CsvEncoder[A] =
  createEncoder(lEncoder.width) { value =>
    lEncoder.encode(gen.to(value))
  }
```

With all these definitions in place,
our `writeCsv` method gains the ability to align its output correctly:

```disabledtut:book:invisible
def writeCsv[A](values: List[A])(implicit encoder: CsvEncoder[A]): String =
  values.map(encoder.encode).map(_.mkString(",")).mkString("\n")
```

```disabledtut:book
writeCsv(shapes)
```
</div>
